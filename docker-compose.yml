version: '2'

services:
  traefik:
    build:
      context: ./bin/traefik
      args:
        - BASIC_AUTH_USERNAME=$BASIC_AUTH_USERNAME
        - BASIC_AUTH_PASSWORD=$BASIC_AUTH_PASSWORD
    container_name: "traefik.${DOMAIN}"
    restart: unless-stopped
    command: -c /dev/null --api --docker --logLevel=DEBUG --acme.email=$EMAIL --configFile=/etc/traefik/traefik.toml --entryPoints='Name:https Address::443 TLS:/etc/traefik/${DOMAIN}.crt,/etc/traefik/${DOMAIN}.key'
    ports:
      - 80:80
      - 443:443
      - 8025:8025
    expose:
      - 8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $VOLUMES_PREFIX/etc/traefik:/etc/traefik
    labels:
      traefik.enable: "true"
      traefik.backend: traefik
      traefik.frontend.rule: "Host:traefik.${DOMAIN}"
      traefik.port: "8080"

  # portainer:
  #   image: portainer/portainer
  #   container_name: "portainer.${DOMAIN}"
  #   restart: unless-stopped
  #   command: --no-auth -H unix:///var/run/docker.sock
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   labels:
  #     # Use the following yaml formatting to allow our basic auth
  #     # variables to be properly escaped
  #     - "traefik.backend=portainer"
  #     - "traefik.port=9000"
  #     - "traefik.frontend.rule=Host:portainer.${DOMAIN}"
  #     - 'traefik.frontend.auth.basic=${BASIC_AUTH_USERNAME}:${BASIC_AUTH_PASSWORD_ENCRYPTED}'
  #   depends_on:
  #     - traefik

  mariadb:
    image: mariadb:10.3.6
    container_name: "mariadb.${DOMAIN}"
    environment:
      MYSQL_ROOT_PASSWORD: "$DB_PASSWORD"
      MYSQL_USER: "$DB_USER"
      MYSQL_PASSWORD: "$DB_PASSWORD"
      # Only specify the DB_DATABASE if we want a db created with this name
      MYSQL_DATABASE: "$DB_DATABASE"
    restart: unless-stopped
    ports:
      - 3306:3306
    volumes:
      - $VOLUMES_PREFIX/var/lib/mysql:/var/lib/mysql
    depends_on:
      - traefik

  # postgres:
  #   image: postgres:10.3
  #   container_name: "postgres.${DOMAIN}"
  #   environment:
  #     POSTGRES_USER: "$DB_USER"
  #     POSTGRES_PASSWORD: "$DB_PASSWORD"
  #     # Only specify the DB_DATABASE if we want a db created with this name
  #     POSTGRES_DB: "$DB_DATABASE"
  #     POSTGRES_INITDB_ARGS: "-E UTF8"
  #   restart: unless-stopped
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     # Persistent data
  #     - $VOLUMES_PREFIX/var/lib/postgresql/data:/var/lib/postgresql/data
  #   depends_on:
  #     - traefik

  redis:
    image: redis:4.0.9-alpine
    container_name: "redis.${DOMAIN}"
    volumes:
      - $VOLUMES_PREFIX/data:/data
    depends_on:
      - traefik

  web:
    build:
      context: ./bin/web
      args:
        - REDIS_PORT=tcp://redis:6379
    container_name: "${DOMAIN}"
    environment:
      # Set locale to UTF-8 (https://oncletom.io/2015/docker-encoding/)
      LANG: C.UTF-8
      # REDIS is linked
      REDIS_HOST: redis
      # DB is linked
      DB_DRIVER: mysql
      # DB_DRIVER: pgsql
      DB_SERVER: mariadb
      # DB_SERVER: postgres
      DB_DATABASE: "${DB_DATABASE}"
      DB_PASSWORD: "${DB_PASSWORD}"
      PGPASSWORD: "${DB_PASSWORD}"
      DB_SCHEMA: public
      DB_PORT: "${DB_PORT}"
      DB_USER: "${DB_USER}"
    restart: unless-stopped
    volumes:
      # - ./craft:/usr/share/nginx
      - $VOLUMES_PREFIX_CRAFT./craft:/usr/share/nginx/html
    labels:
      # Use the following yaml formatting to allow our basic auth
      # variables to be properly escaped
      - "traefik.backend=web"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:${DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - 'traefik.frontend.auth.basic=${BASIC_AUTH_USERNAME}:${BASIC_AUTH_PASSWORD_ENCRYPTED}'
    depends_on:
      - mariadb
      # - postgres
      - redis

  # whoami:
  #   image: emilevauge/whoami # A container that exposes an API to show its IP address
  #   container_name: "whoami.${DOMAIN}"
  #   labels:
  #     # - "traefik.frontend.rule=Host:wtf.tcf.test"
  #     - "traefik.frontend.rule=Host:${DOMAIN}; PathPrefix:/assets"

  # Configure a hot-reloading webpack-dev-server instance
  # and wires it into our stack via Traefik
  appdev:
    # build:
    #   context: ./bin/app-dev
    image: node:8-alpine
    container_name: "app-dev.${DOMAIN}"
    environment:
      - NODE_ENV=development
    working_dir: /app
    ports:
      - 3000:3000
    volumes: # For webpack dev server to use our local files
      - .:/app
    command: "npm run dev"
    labels:
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:${DOMAIN}; PathPrefixStrip:/scripts"
